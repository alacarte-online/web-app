name: build
on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        description: Release type
        options: 
        - patch
        - minor
        - major
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
        - name: Checkout
          uses: actions/checkout@v5
          with:
            fetch-depth: 0 # We need all tags - which apparently requires fetching all commits too
        - name: Determine last version
          id: last_version
          env:
            bump_type: ${{ inputs.release_type }}
          run: |
            highest_version_tag=$(git tag -l *.*.* --sort=-v:refname | head -n 1)
            echo "last_version=$highest_version_tag" >> $GITHUB_OUTPUT
        - name: Determine new version
          id: new_version
          uses: SmithTom6304/bump-version@v1
          env:
            version: ${{ steps.last_version.outputs.last_version }}
            bump_type: ${{ inputs.release_type }}
          with:
            version: ${{ env.version }}
            bump-type: ${{ env.bump_type }}
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        - name: Build and push docker image
          uses: docker/build-push-action@v6
          env:
            image_name: smithtom6304/alacarte-frontend
            new_version: ${{ steps.new_version.outputs.bumped-version }}
            last_version: ${{ steps.last_version.outputs.last_version }}
          with:
            push: true
            tags: "${{ env.image_name }}:${{ env.new_version }}"
            cache-from: "type=registry,ref=${{ env.image_name }}:${{ env.last_version }}"
            cache-to: type=inline
        - name: Create tag
          env:
            new_version: ${{ steps.new_version.outputs.bumped-version }}
          run: |
            git tag ${{ env.new_version }}
            git push origin ${{ env.new_version }}